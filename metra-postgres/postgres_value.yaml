clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
extraDeploy: []
fullnameOverride: ''
global:
  imagePullSecrets: []
  imageRegistry: ''
  ldap:
    bindpw: ''
    existingSecret: ''
  pgpool:
    adminPassword: ''
    adminUsername: ''
    existingSecret: ''
  postgresql:
    database: ''
    existingSecret: ''
    password: ''
    repmgrDatabase: ''
    repmgrPassword: ''
    repmgrUsername: ''
    username: ''
  storageClass: ''
ldap:
  base: ''
  binddn: ''
  bindpw: ''
  bslookup: ''
  enabled: false
  existingSecret: ''
  nssInitgroupsIgnoreusers: root,nslcd
  scope: ''
  tlsReqcert: ''
  uri: ''
metrics:
  annotations:
    prometheus.io/port: '9187'
    prometheus.io/scrape: 'true'
  containerPort: 9187
  customMetrics: {}
  enabled: true
  extraEnvVars: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: true
    runAsUser: 1001
  service:
    clusterIP: ''
    externalTrafficPolicy: Cluster
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePort: ''
    port: 9187
    type: ClusterIP
  serviceMonitor:
    enabled: false
    interval: ''
    metricRelabelings: []
    namespace: ''
    relabelings: []
    scrapeTimeout: ''
    selector:
      prometheus: kube-prometheus
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
metricsImage:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/postgres-exporter
  tag: 0.10.1-debian-10-r53
nameOverride: ''
networkPolicy:
  allowExternal: true
  egressRules:
    customRules: []
    denyConnectionsToExternal: false
  enabled: false
persistence:
  accessModes:
    - ReadWriteOnce
  annotations: {}
  enabled: true
  existingClaim: ''
  mountPath: /bitnami/postgresql
  selector: {}
  size: 8Gi
  storageClass: longhorn
pgpool:
  adminPassword: 'password'
  adminUsername: admin
  affinity: {}
  args: []
  childLifeTime: ''
  childMaxConnections: ''
  clientIdleLimit: ''
  clientMinMessages: error
  command: []
  configuration: ''
  configurationCM: ''
  connectionLifeTime: ''
  containerPort: 5432
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  customUsers: {}
  customUsersSecret: ''
  existingSecret: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  initdbScripts: {}
  initdbScriptsCM: ''
  initdbScriptsSecret: ''
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  loadBalancingOnWrite: transaction
  logConnections: false
  logHostname: true
  logLinePrefix: ''
  logPerNodeStatement: false
  maxPool: ''
  minReadySeconds: ''
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  numInitChildren: ''
  passwords: ''
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  reservedConnections: 1
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: true
    fsGroup: 1001
  serviceLabels: {}
  sidecars: []
  srCheckDatabase: postgres
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tls:
    autoGenerated: false
    certCAFilename: ''
    certFilename: ''
    certKeyFilename: ''
    certificatesSecret: ''
    enabled: false
    preferServerCiphers: true
  tolerations: []
  updateStrategy: {}
  useLoadBalancing: true
  usernames: ''
pgpoolImage:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/pgpool
  tag: 4.3.1-debian-10-r25
postgresql:
  affinity: {}
  args: []
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: true
    logLinePrefix: ''
    logTimezone: ''
    pgAuditLog: ''
    pgAuditLogCatalog: 'off'
  command: []
  configuration: ''
  configurationCM: ''
  containerPort: 5432
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  database: ''
  dbUserConnectionLimit: ''
  existingSecret: ''
  extendedConf: ''
  extendedConfCM: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  initContainers: []
  initdbScripts: {}
  initdbScriptsCM: ''
  initdbScriptsSecret: ''
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  maxConnections: ''
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  password: 'password'
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  pgHbaConfiguration: ''
  pgHbaTrustAll: false
  pghbaRemoveFilters: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  postgresConnectionLimit: ''
  postgresPassword: ''
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 3
  repmgrChildNodesCheckInterval: 5
  repmgrChildNodesConnectedMinCount: 1
  repmgrChildNodesDisconnectTimeout: 30
  repmgrConfiguration: ''
  repmgrConnectTimeout: 5
  repmgrDatabase: repmgr
  repmgrFenceOldPrimary: false
  repmgrLogLevel: NOTICE
  repmgrPassfilePath: ''
  repmgrPassword: 'password'
  repmgrReconnectAttempts: 2
  repmgrReconnectInterval: 3
  repmgrUsePassfile: ''
  repmgrUsername: repmgr
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: true
    fsGroup: 1001
  sharedPreloadLibraries: pgaudit, repmgr
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  statementTimeout: ''
  syncReplication: false
  tcpKeepalivesCount: ''
  tcpKeepalivesIdle: ''
  tcpKeepalivesInterval: ''
  tls:
    certCAFilename: ''
    certFilename: ''
    certKeyFilename: ''
    certificatesSecret: ''
    enabled: false
    preferServerCiphers: true
  tolerations: []
  updateStrategyType: RollingUpdate
  upgradeRepmgrExtension: false
  usePasswordFile: ''
  usePgRewind: false
  username: postgres
postgresqlImage:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/postgresql-repmgr
  tag: 11.15.0-debian-10-r31
psp:
  create: false
rbac:
  create: false
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: Cluster
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  nodePort: ''
  port: 5432
  portName: postgresql
  serviceLabels: {}
  sessionAffinity: None
  type: ClusterIP
serviceAccount:
  enabled: false
  name: ''
topologySpreadConstraints: {}
volumePermissions:
  enabled: false
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0
volumePermissionsImage:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/bitnami-shell
  tag: 10-debian-10-r366
